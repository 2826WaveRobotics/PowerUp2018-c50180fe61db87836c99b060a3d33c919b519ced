// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoCurve.h"
#include <cmath>
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoCurve::AutoCurve(double power, double heading): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
	Requires(Robot::drivePID.get());

	m_heading = heading;
	m_power = -power;


    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoCurve::Initialize() {
	Robot::drivePID->ZeroEncoders();
	//Robot::drivePID.get()->ZeroYaw();

	Robot::drivePID->SetPIDs(c_straightP, c_straightI, c_straightD);
}

// Called repeatedly when this Command is scheduled to run
void AutoCurve::Execute() {

	Robot::drivePID->DriveStraight(m_power, m_heading);

	std::cout << "Heading Dif:" << fabs(m_heading - Robot::drivePID->GetYaw()) << ", Want: " << fabs(m_heading) << ", At: " << fabs(Robot::drivePID->GetYaw()) <<
					 std::endl;


}

// Make this return true when this Command no longer needs to run execute()
bool AutoCurve::IsFinished() {
	double yaw = Robot::drivePID->GetYaw();
	if(((m_heading + 5) > yaw) && ((m_heading - 5) < yaw)){
		Robot::drivePID->SetSidePower(-1,1);
		std::cout << " FINAL: " << fabs(Robot::drivePID->GetYaw()) << std::endl;
		return true;
	}
	else{
		return false;
	}

}

// Called once after isFinished returns true
void AutoCurve::End() {
	Robot::drivePID.get()->ZeroEncoders();
	//Robot::drivePID.get()->ZeroYaw();
	std::cout << "End" << std::endl;
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoCurve::Interrupted() {

}
