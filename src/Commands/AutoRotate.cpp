// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "AutoRotate.h"
#include <iostream>

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

AutoRotate::AutoRotate(double rotate, double power): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
	Requires(Robot::drivePID.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	m_rotate = rotate;
	m_power = power;
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void AutoRotate::Initialize() {
	Robot::drivePID->ZeroYaw();
	//Robot::drivePID->ZeroEncoders();
	Robot::drivePID->SetPIDs(c_turnP, c_turnI, c_turnD);
	Robot::drivePID->SetDirection(m_rotate);
	//Robot::drivePID->Rotate(0, m_power, m_rotate);
}

// Called repeatedly when this Command is scheduled to run
void AutoRotate::Execute() {

	Robot::drivePID.get()->Rotate(0.1, m_power, m_rotate);

	std::cout << /*"Correction: " << correction << "\tLeft: " <<
			correctedLeftPower << "\tRight: " << correctedRightPower  <<*/
			" Goal: " << m_rotate << " Yaw: " << fabs(Robot::drivePID->GetYaw());

}

// Make this return true when this Command no longer needs to run execute()
bool AutoRotate::IsFinished() {
	double yaw = Robot::drivePID->GetYaw();
	if(((m_rotate + 5) > yaw) && ((m_rotate - 5) < yaw)){
		Robot::drivePID->SetSidePower(-1,1);
		std::cout << " FINAL: " << fabs(Robot::drivePID->GetYaw()) << std::endl;
		return true;
	}
	else{
		return false;
	}
}

// Called once after isFinished returns true
void AutoRotate::End() {
	Robot::drivePID.get()->ArcadeDrive(0, 0);
}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void AutoRotate::Interrupted() {

}
