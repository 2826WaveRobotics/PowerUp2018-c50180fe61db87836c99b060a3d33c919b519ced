#include "DrivePID.h"
#include "../RobotMap.h"
#include "../OI.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
#include <iostream>
#include <math.h>
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

namespace{
 const int c_CPR = 256;
}

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
DrivePID::DrivePID() : PIDSubsystem("DrivePID", c_straightP, c_straightI, c_straightD) {
    SetAbsoluteTolerance(0.2);
    //GetPIDController()->SetContinuous(false);
    //frc::LiveWindow::GetInstance()->AddActuator("DrivePID", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    left1 = RobotMap::drivePIDLeft1;
    left2 = RobotMap::drivePIDLeft2;
    left3 = RobotMap::drivePIDLeft3;
    leftDriveGroup = RobotMap::drivePIDLeftDriveGroup;
    right1 = RobotMap::drivePIDRight1;
    right2 = RobotMap::drivePIDRight2;
    right3 = RobotMap::drivePIDRight3;
    rightDriveGroup = RobotMap::drivePIDRightDriveGroup;
    diffDrive = RobotMap::drivePIDDiffDrive;
    leftEncoder = RobotMap::drivePIDLeftEncoder;
    rightEncoder = RobotMap::drivePIDRightEncoder;
    shifter = RobotMap::drivePIDShifter;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    //right1->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
    //right1->ConfigPeakOutputReverse(-100, 50);
    //right1->ConfigPeakOutputForward(100, 50);
    right1->SetSafetyEnabled(false);
    //right1->SetStatusFramePeriod(Status_2_Feedback0_, 10, 20);

    diffDrive->SetSafetyEnabled(false);

    right2->SetSafetyEnabled(false);
    right3->SetSafetyEnabled(false);

//    left1->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
//    left1->ConfigPeakOutputReverse(-100, 50);
//    left1->ConfigPeakOutputForward(100, 50);
    left1->SetSafetyEnabled(false);
    //left1->SetStatusFramePeriod(Status_2_Feedback0_, 10, 20);

    left2->SetSafetyEnabled(false);
    left3->SetSafetyEnabled(false);

    gyro = new AHRS(SPI::Port::kMXP, 100);

    GetPIDController()->SetContinuous(true);
    GetPIDController()->SetInputRange(-180, 180);
    GetPIDController()->SetOutputRange(-1, 1);
    GetPIDController()->SetAbsoluteTolerance(.5);

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.

    GetPIDController()->Disable();
}

double DrivePID::ReturnPIDInput() {
    // Return your input value for the PID loop
    return GetYaw();
}

void DrivePID::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor

    //rightDriveGroup->PIDWrite(output);
    //leftDriveGroup->PIDWrite(output);

}

double DrivePID::GetPIDOutput(){
	return GetPIDController()->Get();
}

void DrivePID::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
}

void DrivePID::ArcadeDrive(double forward, double turn) {
	GetPIDController()->Disable();
	diffDrive.get()->ArcadeDrive(forward, turn);

}

void DrivePID::SetSidePower(double left, double right){
	diffDrive.get()->TankDrive(left, right);
}

void DrivePID::DriveCurve(double power, double heading) {
	SetDirection(heading);
	double correction = GetPIDController()->Get();

	std::cout << "Correction: " << correction << std::endl;
	if(heading > 0){
		diffDrive.get()->CurvatureDrive(power-correction, heading, false);
	}
	else if(heading < 0){
		diffDrive.get()->CurvatureDrive(power+correction, heading, false);
	}
	else{
		diffDrive.get()->CurvatureDrive(power-correction, heading, false);
	}
}

void DrivePID::DriveStraight(double power, double heading) {

	double yaw = GetYaw();
	SetDirection(heading);
	double correction = fabs(GetPIDOutput());
	bool direction;

	if(yaw > 0){
		if((heading < yaw)&& (heading > (-180 + yaw))){
			direction = 1; //Left
		}
		else{
			direction = 0;
		}
	}
	else if(yaw < 0){
		if((heading > yaw)&& (heading < (180 + yaw))){
			direction = 0; //Right
		}
		else{
			direction = 1;
		}
	}

	std::cout << "Correction: " << correction << std::endl;

	if((power < 0) && (direction == 1)){
		diffDrive.get()->TankDrive(power+correction, power, false);
	}
	else if((power < 0) && (direction == 0)){
		diffDrive.get()->TankDrive(power, power+correction, false);
	}
	else if((power > 0) && (direction == 1)){
		diffDrive.get()->TankDrive(power+correction, power, false);
	}
	else if((power > 0) && (direction == 0)){
		diffDrive.get()->TankDrive(power, power+correction, false);
	}
	else{
		diffDrive.get()->TankDrive(power, power);
	}

}
void DrivePID::Rotate(double heading) {

	double yaw = GetYaw();
	SetDirection(heading);
	double correction = fabs(GetPIDOutput());
	bool direction;

	if(yaw > 0){
		if((heading < yaw)&& (heading > (-180 + yaw))){
			direction = 1; //Left
		}
		else{
			direction = 0;
		}
	}
	else if(yaw < 0){
		if((heading > yaw)&& (heading < (180 + yaw))){
			direction = 0; //Right
		}
		else{
			direction = 1;
		}
	}

	std::cout << "Correction: " << correction << "  Direction :  " << direction << std::endl;

	if(direction){
		std::cout << " LEFT " << std::endl;
		diffDrive.get()->TankDrive(correction, -correction, false);
	}
	else if(!direction){
		std::cout << " RIGHT " << std::endl;
		diffDrive.get()->TankDrive(-correction, correction, false);
	}
}

void DrivePID::DriveDistance(double distance, double power, double heading){
	double yaw = GetYaw();
	SetDirection(heading);
	double correction = fabs(GetPIDOutput());
	double velocity = fabs(GetVelocity());
	double m_distanceTraveled = GetDistance();
	bool direction;

	double distanceDiff = fabs(m_distanceTraveled - distance);
	double slowdownConst = 0.2;

	//Decide on direction
	if(yaw > 0){
		if((heading < yaw)&& (heading > (-180 + yaw))){
			direction = 1; //Left
		}
		else{
			direction = 0;
		}
	}
	else if(yaw < 0){
		if((heading > yaw)&& (heading < (180 + yaw))){
			direction = 0; //Right
		}
		else{
			direction = 1;
		}
	}

	if(driveState == c_accelerate){
		DriveAccelerate(distance, power);
	}
	else if(driveState == c_deaccelerate){
		DriveDeaccelerate(distance, power);
	}
	else{
		DriveStop(power);
	}
}

void DrivePID::DriveAccelerate(double distance, double power){
	SetSidePower(power, power);
	double distanceDiff = fabs(fabs(GetDistance())-(fabs(distance)));

	double velocity = fabs(GetVelocity());
	double stoppingDist = velocity*1.35;

	std::cout << "   Drive Accelerate   " << "   Distance Difference:  " << distanceDiff
			<< "  Stopping Distance:  " << stoppingDist << std::endl;

	if(distanceDiff <= stoppingDist){
		driveState = c_deaccelerate;
		std::cout << "  Change to Deaccelerate  " << std::endl;
	}
}

void DrivePID::DriveDeaccelerate(double distance, double power){
	std::cout << "   Drive Deaccelerate   " << std::endl;
	SetSidePower(0, 0);
	double velocity = fabs(GetVelocity());
	if(velocity < (10)){
		std::cout << "   Change to Drive Stop    " << std::endl;
		driveState = c_stop;
	}
}

void DrivePID::DriveStop(double distance){
	double velocity = GetVelocity();
	double inverseVelocity = 1/(GetVelocity()/2);
	std::cout << "   Drive Stop   " << " Inverse Velocity:  " << inverseVelocity << std::endl;

	if(velocity > 1){
		SetSidePower(-inverseVelocity, -inverseVelocity);
	}
	else if(velocity < -1){
		SetSidePower(-inverseVelocity, -inverseVelocity);
	}
	else{
		SetSidePower(0, 0);
	}
}



void DrivePID::Shift(bool state) {
	shifter.get()->Set(state);
	std::cout << " ---------------------DRIVE SHIFT _______________________   " << state<<  std::endl;

}

double DrivePID::GetRightEncoder() {
	//double encoderCount = right1->GetSensorCollection().GetQuadraturePosition();
	double encoderCount = rightEncoder->Get();
	double distance = encoderCount/c_CPR*6.05*3.1415;

	return distance;
}

double DrivePID::GetLeftEncoder() {
	//double encoderCount = left1->GetSensorCollection().GetQuadraturePosition();
	double encoderCount = leftEncoder->Get();
	double distance = encoderCount/c_CPR*6.05*3.1415;

	return distance;
}

double DrivePID::GetDistance(){
	double rightDist = GetRightEncoder();
	double leftDist = GetLeftEncoder()*(-1);
	double m_distanceTraveled;
	if(rightDist < 0 ){
		m_distanceTraveled =  (rightDist+leftDist)/2;
	}
	else if (rightDist > 0){
		m_distanceTraveled = ((rightDist+leftDist)/2)*(-1);
	}
	else{
		m_distanceTraveled = 0;
	}

	return m_distanceTraveled;
}



void DrivePID::ZeroEncoders(){
	rightEncoder->Reset();
	leftEncoder->Reset();
	//right1->GetSensorCollection().SetQuadraturePosition(0, 50);
	//left1->GetSensorCollection().SetQuadraturePosition(0, 50);
}

float DrivePID::GetYaw(){
	return gyro->GetYaw();
}

void DrivePID::ZeroYaw(){
	gyro->ZeroYaw();
}

void DrivePID::SetPIDs(double kP, double kI, double kD) {
	GetPIDController()->SetPID(kP, kI, kD);
}

void DrivePID::SetDirection(double heading){
	if(GetPIDController()->GetSetpoint() != heading)
	{
		GetPIDController()->Disable();
		GetPIDController()->Reset();

		GetPIDController()->SetSetpoint(heading); //we are now facing the same way the entire time
		GetPIDController()->Enable();
	}
}

void DrivePID::DriveTurning(double driverY){
	std::shared_ptr<NetworkTable> table = NetworkTable::GetTable("limelight");
	table->PutNumber("pipeline", 2);
	UpdateLimelight();
	float kp = -0.05f;
	float min_command = 0.05f;
	double yaw = GetYaw();
	//if yaw changes BIG wrong way, limit correction. only lock on boxes in acceptable range. back up??
	float heading_error = -m_targetX;
	float steering_adjust= 0.0f;

	if(m_targetX == 0){
		steering_adjust = driverY;
	}
	else if(m_targetX > 3){
		steering_adjust = kp*heading_error - min_command;
	}
	else if(m_targetX < -3){
		steering_adjust = kp*heading_error + min_command;
	}

	SetSidePower(driverY-steering_adjust, driverY+steering_adjust);
}

void DrivePID::UpdateLimelight(){

	std::shared_ptr<NetworkTable> table = NetworkTable::GetTable("limelight");
	table->PutNumber("ledMode", 0);

	m_targetX = table->GetNumber("tx", 0);
	m_targetY = table->GetNumber("ty", 0);
	m_area = table->GetNumber("ta", 0);
	m_skew = table->GetNumber("ts", 0);

	std::cout << "  x: " << m_targetX << "  y: " << m_targetY << "  a:" << m_area << "  s: " << m_skew ;
	std::cout << "  Angle:  " << atan(m_targetX/76)*180/3.14 << "  Yaw: " << GetYaw() <<  std::endl;
}

double DrivePID::AdjustWithVision(){

	double yaw = GetYaw();
	double adjustment = atan(m_targetX/76)*180/3.14;

	//77 inches

	if(m_targetX > 2){
		std::cout << " Target is too far right";
		m_newHeading = yaw+adjustment;
	}
	else if (m_targetX < -2){
		std::cout << " Target is too far left";
		m_newHeading = yaw+adjustment;
	}
	else{
		m_newHeading = yaw;
	}

	std::cout << "  Yaw: " << GetYaw() << "  New Heading:  " << m_newHeading << std::endl;
	return m_newHeading;
	//DriveStraight(newPower, newHeading);
	//Rotate(newHeading);
}

double DrivePID::OutputX(){
	return m_targetX;
}

bool DrivePID::IsTargetFound(){
	//UpdateLimelight();
	if((m_targetX < 5) && (m_targetX > -5) && ((m_targetY < 12) && (m_targetY > 10)) && (m_area > 8) && (m_area < 12) ){
		return true;
	}
	else{
		return false;
	}
}
