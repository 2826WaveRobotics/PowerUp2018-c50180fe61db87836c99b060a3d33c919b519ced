// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Elevator.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Elevator::Elevator() : PIDSubsystem("Elevator", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
   // GetPIDController()->SetContinuous(false);
 //   frc::LiveWindow::GetInstance()->AddActuator("Elevator", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevatorEncoder = RobotMap::elevatorElevatorEncoder;
    elevatorRight = RobotMap::elevatorElevatorRight;
    elevatorLeft = RobotMap::elevatorElevatorLeft;
    liftMotors = RobotMap::elevatorLiftMotors;
    elevatorZero = RobotMap::elevatorElevatorZero;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elevatorRight.get()->SetInverted(true);
    elevatorLeft->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
    elevatorLeft->ConfigPeakOutputReverse(-100, 50);
    elevatorLeft->ConfigPeakOutputForward(100, 50);
    elevatorLeft->SetSafetyEnabled(false);

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.

    //Start with the PID disabled. To enable, call SetElevatorHeight()
    Disable();
}

double Elevator::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
        return elevatorEncoder->PIDGet();

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void Elevator::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    liftMotors->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void Elevator::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Elevator::SetElevatorSpeed(double speed) {
	Disable();
	liftMotors.get()->Set(speed);
}

double Elevator::GetHeight(){
//	double encoderCount = elevatorLeft->GetSensorCollection().GetQuadraturePosition();
//	double distance = encoderCount/256;
//	return distance;

	//Kellie: I think we can just call GetPosition since the distance per pulse was
	//given to the encoder in RobotMap.cpp

	return GetPosition();
}

void Elevator::ZeroHeight(){
	if(elevatorZero.get()->Get()){
		elevatorLeft->GetSensorCollection().SetQuadraturePosition(0, 50);
	}
}

