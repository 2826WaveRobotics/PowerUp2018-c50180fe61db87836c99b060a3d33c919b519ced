// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include "Elbow.h"
#include "../RobotMap.h"
#include "SmartDashboard/SmartDashboard.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID
Elbow::Elbow() : PIDSubsystem("Elbow", 1.0, 0.0, 0.0) {
    SetAbsoluteTolerance(0.2);
//    GetPIDController()->SetContinuous(false);
    //frc::LiveWindow::GetInstance()->AddActuator("Elbow", "PIDSubsystem Controller", GetPIDController());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=PID

    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    elbowRight = RobotMap::elbowElbowRight;
    elbowLeft = RobotMap::elbowElbowLeft;
    elbowRotate = RobotMap::elbowElbowRotate;
    //elbowPosition = RobotMap::elbowElbowPosition;
    elbowZero = RobotMap::elbowElbowZero;

    elbowRight->ConfigSelectedFeedbackSensor(FeedbackDevice::QuadEncoder, 0, 50);
    elbowRight->ConfigPeakOutputReverse(-100, 50);
    elbowRight->ConfigPeakOutputForward(100, 50);
    elbowRight->SetSafetyEnabled(false);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // Use these to get going:
    // SetSetpoint() -  Sets where the PID controller should move the system
    //                  to
    // Enable() - Enables the PID controller.

    //Start with the PID turned off. Need to call SetAngle() to start the control.
    Disable();
}

double Elbow::ReturnPIDInput() {
    // Return your input value for the PID loop
    // e.g. a sensor, like a potentiometer:
    // yourPot->SetAverageVoltage() / kYourMaxVoltage;
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
       // return elbowPosition->PIDGet();
return 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=SOURCE
}

void Elbow::UsePIDOutput(double output) {
    // Use output to drive your system, like a motor
    // e.g. yourMotor->Set(output);
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
    elbowRotate->PIDWrite(output);

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=OUTPUT
}

void Elbow::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND


    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void Elbow::ZeroDegrees()
{
	if(elbowZero.get()->Get()){
			elbowLeft->GetSensorCollection().SetQuadraturePosition(0, 50);
		}
}

void Elbow::SetElbowSpeed(double speed)
{
	Disable();
	elbowRotate.get()->Set(speed);
}

void Elbow::SetAngle(double angle)
{
	//We might be able to just set the angle. Since we set the encoder counts per pulse,
	//it may do it's own converting.

	SetSetpoint(angle);
	Enable();
}

double Elbow::GetAngle()
{

	double encoderCount = elbowRight->GetSensorCollection().GetQuadraturePosition();
	double distance = encoderCount/12;
	return distance;

}
